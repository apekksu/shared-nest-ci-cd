name: Build and Deploy NestJS App

on:
  workflow_call:
    inputs:
      s3-bucket-name:
        required: true
        type: string
      application-name:
        required: true
        type: string
      application-port:
        required: true
        type: number
      aws-region:
        required: false
        type: string
        default: us-west-2
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      MONGODB_URI:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: List Files Before Packaging
        run: |
          echo "Listing files in the project directory:"
          ls -l
          echo "Listing contents of the dist directory:"
          ls -l dist
          ls -l dist/src
          ls -l dist/scripts

      - name: Package application
        run: |
          zip -r ${{ inputs.application-name }}.zip \
            dist \
            package.json \
            package-lock.json \
            node_modules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Retrieve Shared EC2 Instance Information
        run: |
          EC2_INFO=$(aws ec2 describe-instances \
            --filters "Name=tag:App,Values=shared-nest-ci-cd" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].[InstanceId, PublicIpAddress]" \
            --output text)

          EC2_INSTANCE_ID=$(echo "$EC2_INFO" | awk '{print $1}')
          EC2_PUBLIC_IP=$(echo "$EC2_INFO" | awk '{print $2}')

          echo "EC2 Instance ID: $EC2_INSTANCE_ID"
          echo "EC2 Public IP: $EC2_PUBLIC_IP"

          echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

          if [ -z "$EC2_INSTANCE_ID" ]; then
            echo "Error: EC2_INSTANCE_ID is empty. Exiting."
            exit 1
          fi

      - name: Upload package to S3
        run: |
          aws s3 cp ${{ inputs.application-name }}.zip s3://${{ inputs.s3-bucket-name }}/${{ inputs.application-name }}/

      - name: Deploy application using SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="
              set -e
      
              cd /home/ec2-user

              sudo -u ec2-user pm2 stop ${{ inputs.application-name }} || true
              sudo -u ec2-user pm2 delete ${{ inputs.application-name }} || true
              rm -rf ${{ inputs.application-name }}
      
              mkdir ${{ inputs.application-name }}
              cd ${{ inputs.application-name }}
      
              aws s3 cp s3://${{ inputs.s3-bucket-name }}/${{ inputs.application-name }}/${{ inputs.application-name }}.zip .
              unzip -o ${{ inputs.application-name }}.zip
      
              chown -R ec2-user:ec2-user /home/ec2-user/${{ inputs.application-name }}
      

              ESCAPED_MONGODB_URI=\"$(echo '${{ secrets.MONGODB_URI }}' | sed 's/\\$/\\\\$/g')\"

              cat << EOF > .env.dev
              MONGODB_URI=\$ESCAPED_MONGODB_URI
              EOF

              cat .env.dev
      
              sudo -u ec2-user pm2 start dist/src/main.js \
                --name ${{ inputs.application-name }} \
                --cwd /home/ec2-user/${{ inputs.application-name }} \
                -- --port=${{ inputs.application-port }}
            " \
            --timeout-seconds 600 \
            --region ${{ inputs.aws-region }}
        
      
      

      - name: Wait for SSM command to complete
        run: sleep 30

      - name: Verify Deployment
        run: |
          echo "Deployment completed."
          echo "Application is accessible at http://${{ env.EC2_PUBLIC_IP }}:${{ inputs.application-port }}/"
